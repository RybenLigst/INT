---
- name: Deploy Backend with Real Credentials
  hosts: gcp_group_instance_back_group
  become: yes
  vars:
    backend_jar: "./build/backend/target/dev.war"
    backend_dest: "/opt/teachua-backend"
    backend_url: "http://34.121.241.173:8080"
    frontend_url: "http://34.132.63.67"
    
  tasks:
    - name: Install Java 17
      apt:
        name: openjdk-17-jdk
        state: present
        update_cache: yes

    - name: Stop existing spring-boot service
      systemd:
        name: spring-boot
        state: stopped
      ignore_errors: yes

    - name: Create backend directory
      file:
        path: "{{ backend_dest }}"
        state: directory
        owner: root
        group: root
        mode: '0755'

    - name: Create uploads directory
      file:
        path: "{{ backend_dest }}/uploads"
        state: directory
        owner: root
        group: root
        mode: '0755'

    - name: Copy backend JAR to server
      copy:
        src: "{{ backend_jar }}"
        dest: "{{ backend_dest }}/app.war"
        owner: root
        group: root
        mode: '0644'

    - name: Create Google Service Account credentials file
      copy:
        content: "{{ lookup('env', 'SERVICE_ACCOUNT_PRIVATE_KEY') | default('YOUR_GOOGLE_SERVICE_ACCOUNT_KEY_HERE') }}"
        dest: "{{ backend_dest }}/google-service-account.key"
        mode: '0600'

    - name: Create systemd service file with real credentials
      copy:
        content: |
          [Unit]
          Description=TeachUA Backend Service
          After=network.target

          [Service]
          Type=simple
          User=root
          ExecStart=/usr/bin/java -Dspring.profiles.active=docker -jar {{ backend_dest }}/app.war
          Restart=on-failure
          RestartSec=30
          WorkingDirectory={{ backend_dest }}
          StandardOutput=journal
          StandardError=journal
          
          # Basic configuration
          Environment=JAVA_HOME=/usr/lib/jvm/java-17-openjdk-amd64
          Environment=BASE_URL={{ backend_url }}
          Environment=PUBLIC_URL=
          Environment=STATIC_FOLDER=/frontend
          Environment=UPLOAD_PATH={{ backend_dest }}/uploads
          Environment=URL_LOGS=/var/log/teachua
          
          # Database configuration (from setenv.sh)
          Environment=DEV2_DATASOURCE_URL=jdbc:postgresql://34.173.19.35:5432/teachua
          Environment=DEV2_DATASOURCE_USER=teachua_user
          Environment=DEV2_DATASOURCE_PASSWORD=${DEV2_DATASOURCE_PASSWORD:-YOUR_DB_PASSWORD_HERE}
          
          # JWT configuration (from setenv.sh)
          Environment=JWT_ACCESS_SECRET_KEY=${JWT_ACCESS_SECRET_KEY:-YOUR_JWT_ACCESS_SECRET_KEY_HERE}
          Environment=JWT_REFRESH_SECRET_KEY=${JWT_REFRESH_SECRET_KEY:-YOUR_JWT_REFRESH_SECRET_KEY_HERE}
          
          # Mail configuration (from setenv.sh)
          Environment=USER_EMAIL=${USER_EMAIL:-YOUR_EMAIL_HERE}
          Environment=SEND_PASSWORD=${SEND_PASSWORD:-YOUR_SEND_PASSWORD_HERE}
          
          # OAuth2 configuration (from setenv.sh)
          Environment=OAUTH2_GOOGLE_CLIENT_ID=${OAUTH2_GOOGLE_CLIENT_ID:-YOUR_GOOGLE_CLIENT_ID_HERE}
          Environment=OAUTH2_GOOGLE_CLIENT_SECRET=${OAUTH2_GOOGLE_CLIENT_SECRET:-YOUR_GOOGLE_CLIENT_SECRET_HERE}
          Environment=OAUTH2_FACEBOOK_CLIENT_ID=${OAUTH2_FACEBOOK_CLIENT_ID:-YOUR_FACEBOOK_CLIENT_ID_HERE}
          Environment=OAUTH2_FACEBOOK_CLIENT_SECRET=${OAUTH2_FACEBOOK_CLIENT_SECRET:-YOUR_FACEBOOK_CLIENT_SECRET_HERE}
          
          # Google Service Account configuration (from setenv.sh)
          Environment=SERVICE_ACCOUNT_CLIENT_EMAIL=${SERVICE_ACCOUNT_CLIENT_EMAIL:-YOUR_SERVICE_ACCOUNT_EMAIL}
          Environment=SERVICE_ACCOUNT_PRIVATE_KEY=${SERVICE_ACCOUNT_PRIVATE_KEY:-YOUR_SERVICE_ACCOUNT_PRIVATE_KEY}
          
          # Additional production configuration
          Environment=PROD_BASE_URL={{ backend_url }}
          Environment=GOOGLE_MAP_KEY=AIzaSyArEeghQZQaaV2miDz4V3Lo2wCuCtY9klA

          [Install]
          WantedBy=multi-user.target
        dest: /etc/systemd/system/spring-boot.service

    - name: Create log directory
      file:
        path: /var/log/teachua
        state: directory
        owner: root
        group: root
        mode: '0755'

    - name: Reload systemd daemon
      systemd:
        daemon_reload: yes

    - name: Enable and start spring boot service
      systemd:
        name: spring-boot
        enabled: yes
        state: started

    - name: Wait for backend to start
      wait_for:
        port: 8080
        host: localhost
        delay: 60
        timeout: 300
      register: port_check
      ignore_errors: yes

    - name: Get backend service status
      systemd:
        name: spring-boot
      register: service_status
      
    - name: Show service status
      debug:
        msg: 
          - "Service active: {{ service_status.status.ActiveState }}"
          - "Service sub-state: {{ service_status.status.SubState }}"
          - "Port 8080 status: {{ 'OPEN' if port_check is succeeded else 'CLOSED' }}"
      
    - name: Show recent logs
      shell: "journalctl -u spring-boot -n 100 --no-pager | tail -50"
      register: backend_logs
      
    - name: Display logs
      debug:
        msg: "{{ backend_logs.stdout_lines | default([]) }}"
        
    - name: Test API endpoints
      uri:
        url: "{{ item }}"
        method: GET
        status_code: [200, 404, 302, 403, 401, 503]
        validate_certs: no
        timeout: 10
      register: api_checks
      with_items:
        - "http://localhost:8080/"
        - "http://localhost:8080/api/clubs"
        - "http://localhost:8080/swagger-ui/index.html"
        - "http://localhost:8080/actuator/health"
      ignore_errors: yes
      
    - name: Show API check results
      debug:
        msg: "API endpoint {{ item.url }}: {{ item.status | default('Failed') }}"
      loop: "{{ api_checks.results }}"
      when: api_checks is defined

    - name: Final success message
      debug:
        msg: 
          - "ðŸŽ‰ Backend deployment completed!"
          - "Backend URL: {{ backend_url }}"
          - "Swagger UI: {{ backend_url }}/swagger-ui/index.html"
          - "Health Check: {{ backend_url }}/actuator/health"
      when: port_check is succeeded 